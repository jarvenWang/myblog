<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>golang on Home</title>
    <link>http://ingress.test1.com/en/categories/golang/</link>
    <description>Recent content in golang on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>wang_jin_bao@163.com (wangjinbao)</managingEditor>
    <webMaster>wang_jin_bao@163.com (wangjinbao)</webMaster>
    <copyright>©2024, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 08 Jun 2022 12:00:06 +0900</lastBuildDate>
    
        <atom:link href="http://ingress.test1.com/en/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>go开发者成长路线图</title>
        <link>http://ingress.test1.com/en/posts/grow_up/</link>
        <pubDate>Wed, 08 Jun 2022 12:00:06 +0900</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 08 Jun 2022 12:00:06 +0900</atom:modified>
        <guid>http://ingress.test1.com/en/posts/grow_up/</guid>
        <description></description>
        
        <dc:creator>wangjinbao</dc:creator>
        <media:content url="http://ingress.test1.comimages/feature3/img_2.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的观察者模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_observer/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:10 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:10 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_observer/</guid>
        <description>定义了对象之间的一对多依赖关系，使得当一个对象改变状态时，其所有依赖对象都会收到通知并自动更新 *个人理解说法： 步骤1 定义一个观察者的接口，有</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的装饰器模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_decorator/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:09 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:09 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_decorator/</guid>
        <description>装饰器模式可通过在接口中封装其它接口并添加行为来实现 如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import &amp;#34;fmt&amp;#34; type Component interface { Operation() string } type</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的工厂模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_factory/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:08 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:08 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_factory/</guid>
        <description>通过工厂方法创建对象，而无需指定创建对象的具体类 如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的单例模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_singleton/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:07 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:07 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_singleton/</guid>
        <description>对于设计模式，更多的则是仁者见仁智者见智，要在实际工作中不断的积累，再进行深度的思考，才能逐渐形成的一种思维。 单例模式 也叫单子模式，是常用的</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
