<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Home</title>
    <link>http://ingress.test1.com/en/</link>
    <description>Recent content on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>wang_jin_bao@163.com (wangjinbao)</managingEditor>
    <webMaster>wang_jin_bao@163.com (wangjinbao)</webMaster>
    <copyright>©2024, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 25 Jun 2023 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://ingress.test1.com/en/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>StarRocks使用</title>
        <link>http://ingress.test1.com/en/stack/bigdata/starrocks/</link>
        <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 25 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/starrocks/</guid>
        <description>什么是StarRocks 官网地址 https://docs.starrocks.io/zh/docs/introduction/ StarRocks 是一款高性能分析型数据仓库，使用向量化、MPP 架构、可实时更新的列式存储引擎等技术实现多维、实时、高并发</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>数仓模型设计原则</title>
        <link>http://ingress.test1.com/en/stack/bigdata/design/</link>
        <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 24 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/design/</guid>
        <description>PS:数仓的设计流程： 步骤一：了解业务流程 建设过程： 一、数据整合及管理体系 定位与价值 建设统一的、规范化的数据接入层（ODS）和 数据中间层（D</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>k3s&#43;multipass实践k8s集群操作</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s2/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 23 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s2/</guid>
        <description>k8s的组件 node node是K8S集群中的一个节点 pod pod最小单元 ps:一个pod中是可以运行多个容器中的 service:svc 内部服务：数据库、后端API 外部服务</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
            
              <category>k3s</category>
            
          
            
              <category>multipass</category>
            
          
        
        
      </item>
      
      <item>
        <title>k8s实践与总结-1(pod)</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s3/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 23 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s3/</guid>
        <description>pod pause容器 pause容器的作用: 最主要的作用：创建共享的网络名称空间，以便于其它容器以平等的关系加入此网络名称空间 pause进程 是po</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
        
        
      </item>
      
      <item>
        <title>k8s实践与总结-2(资源与属性)</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s4/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 23 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s4/</guid>
        <description>资源分类 名称空间级别： 如：kube-system、k3s 1.工作负载型资源： pod 、replicaSet 、Deployment 、stateful</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
        
        
      </item>
      
      <item>
        <title>k8s实践与总结-3(pod生命周期)</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s5/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 23 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s5/</guid>
        <description>生命周期 pause容器 基础网络容器 Init C 初始化容器 Init容器 与 变通容器的区别： Init容器总是运行到成功完成为止 每个Init容器必须在下一个</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
        
        
      </item>
      
      <item>
        <title>k8s实践与总结-4(控制器)</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s6/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 23 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s6/</guid>
        <description>k8s控制器 定义： k8s中内建了很多的controller(控制器)，相当于一个状态机，用来控制pod的具体状态和行为 控制器类型 Replic</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
        
        
      </item>
      
      <item>
        <title>k8s实践与总结-5(service)</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s7/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 23 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s7/</guid>
        <description>service服务 service的定义： 通过 label 和 selector 对外提供访问的一组pod，相当于微服务 svc只能提供 4层负载均衡 能力,没有7层负载均衡， 也</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
        
        
      </item>
      
      <item>
        <title>k8s实践与总结-6(ingress)</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s8/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 23 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s8/</guid>
        <description>ingress ingress概述 定义：提供外部访问内部集群的 访问入口，路由规则的集合，将外部的http或https请求转发到集群内部的service上。</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
        
        
      </item>
      
      <item>
        <title>vue3实战项目</title>
        <link>http://ingress.test1.com/en/stack/javascript/project/</link>
        <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 01 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/project/</guid>
        <description>PS: 查看所有npm全局变量 npm list -global 1 2 3 npm cache clean --force //清除npm缓存 npm init vue@latest 或 npm create vue@latest ✔ Project name: … vue3-project package.json中修改： 1 &amp;#34;dev&amp;#34;: &amp;#34;vite --host 172.19.0.13&amp;#34; 总结关键点：</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>vue3框架</title>
        <link>http://ingress.test1.com/en/stack/javascript/vue1/</link>
        <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 01 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/vue1/</guid>
        <description>前期准备 插件 VScode + Vue Language Features (Volar) &amp;ndash; 高亮 edge 浏览器插件 vue devtools 创建项目 1 2 3 4 5 npm init vue@latest # 一路回车 npm install npm run dev npm run build docker外网访问，解决方法 1 2 3 4 5 6 7</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>vue3简单例子</title>
        <link>http://ingress.test1.com/en/stack/javascript/demo/</link>
        <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 01 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/demo/</guid>
        <description>例子1 自定义属性、事件 src/App.vue 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Vue的debug调试</title>
        <link>http://ingress.test1.com/en/stack/javascript/debugger/</link>
        <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 01 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/debugger/</guid>
        <description>常用方式如下三种： 1.源代码中增加debugger 或 console.log 2.在Chrome浏览器Source中加断点 3.vscode中直接调试，对源码定位准确</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>样式技巧</title>
        <link>http://ingress.test1.com/en/stack/javascript/style/</link>
        <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 01 Jun 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/style/</guid>
        <description>常用样式 vue中默认样式位置 1 2 3 src/assets/main.css src/assets/base.css 如不需要可以注释 清除所有的外边距和内边距 1 2 3 4 *{ margin:0; padding:0; } 并排排列 1 2 3 .box{ display:flex; } 垂直排部 1 2 3 .box{ align-items:center; } div 竖 排</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>airflow调度系统</title>
        <link>http://ingress.test1.com/en/stack/bigdata/airflow/</link>
        <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 24 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/airflow/</guid>
        <description>Airflow概念 Apache Airflow是一个开源的任务调度和工作流管理平台，它使用Python编写。Airflow调度器是Airflow的一个核</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>dolphinscheduler</title>
        <link>http://ingress.test1.com/en/stack/bigdata/dolphinscheduler/</link>
        <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 24 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/dolphinscheduler/</guid>
        <description>简介 Apache DolphinScheduler 旨在解决复杂的大数据任务依赖关系，并为应用程序提供数据和各种 OPS 编排中的关系。 解决数据研发ETL依赖错综复杂，无法监控任务健康状态的问</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>SQL窗口函数</title>
        <link>http://ingress.test1.com/en/stack/bigdata/sql_func/</link>
        <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 24 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/sql_func/</guid>
        <description>窗口函数 窗口函数表达式： 1 2 3 function(args)OVER([PARTITIONBYexpression][ORDERBYexpre</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>SQL高级用法</title>
        <link>http://ingress.test1.com/en/stack/bigdata/sql_high/</link>
        <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Tue, 23 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/sql_high/</guid>
        <description>1.自定义排序 (ORDER BY FIELD) 在MySQL中ORDER BY 排序除了 ASC 和 DESC 之外，还可以用自定义排序方式实现 1 select*frommoviesORDERB</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>StarRocks的Join 查询优化</title>
        <link>http://ingress.test1.com/en/stack/bigdata/select/</link>
        <pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 22 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/select/</guid>
        <description>1.Join背景 1.1Join 类型 上图列举了常见的 Join 类型： Cross Join：左表和右表的一个笛卡尔积。 Full / Left / Right Outer Join：Outer Join 需要根据语义，对两表/</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>StarRocks的执行计划</title>
        <link>http://ingress.test1.com/en/stack/bigdata/plan/</link>
        <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 21 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/plan/</guid>
        <description>1.基本概念 FE FE: 负责 查询解析 ， 查询优化 ， 查询调度 和 元数据管理 BE BE： 负责 查询执行 和 数据存储 2.完整处理一条查询 SQL 2.1 从 SQL 文本到执行计划 口诀：解</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Jeager链路追踪系统</title>
        <link>http://ingress.test1.com/en/stack/knowledge/jeager/</link>
        <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 20 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/jeager/</guid>
        <description>概述 Jaeger 是 Uber 开发并开源的一款 分布式链路追踪系统 ，兼容 OpenTracing API。 适用场景： 分布式跟踪信息传递 分布式事务监控 问题分析 依赖分析 性能优化 特性 高扩展性 J</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>jeager</category>
            
          
        
        
      </item>
      
      <item>
        <title>OpenTracing</title>
        <link>http://ingress.test1.com/en/stack/knowledge/opentracing/</link>
        <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 20 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/opentracing/</guid>
        <description>OpenTracing概念 OpenTracing 分布式调用链标准（OpenTracing） 为了让分布式链路追踪技术有一个行业标准，CNCF（云原生计算基金会） 推</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>jeager</category>
            
          
        
        
      </item>
      
      <item>
        <title>prometheus</title>
        <link>http://ingress.test1.com/en/stack/knowledge/prometheus/</link>
        <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 20 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/prometheus/</guid>
        <description>概述 prometheus 是一个 时间序列 数据库 prometheus特点 多维度数据模型 Prometheus 使用多维度的数据模型来存储时间序列数据 强大的查询语言 PromQL 是 Prometheus 的查询语言，支持</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>prometheus</category>
            
          
        
        
      </item>
      
      <item>
        <title>数仓建设规范</title>
        <link>http://ingress.test1.com/en/stack/bigdata/tips/</link>
        <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 20 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/tips/</guid>
        <description>1、引言 1.1目标与范围 介绍企业IT数仓建设体系、架构和数据仓库开发规范，并附上实际案例加以说明，为数据仓库建设工作提供规范标准和指导建议。</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>bigdata</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>浅谈yaml</title>
        <link>http://ingress.test1.com/en/stack/knowledge/yaml/</link>
        <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 20 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/yaml/</guid>
        <description>介绍 是一个可读性高，用来表达数据序列的格式。 YAML 的意思其实：仍是一种 标记语言，但为是强调这种语言 以数据做为中心，而不是以标记语言为重点 基本语法</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>yaml</category>
            
          
        
        
      </item>
      
      <item>
        <title>consul服务注册中心</title>
        <link>http://ingress.test1.com/en/stack/knowledge/consul_center/</link>
        <pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 19 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/consul_center/</guid>
        <description>介绍 市面上常用的嗠注册中心有： Eureka Nacos Consul ZooKeeper Etcd CoreDNS Eureka2.X版本官方已经停止更新了。 Consul是HashiCorp公司推出使用go语言开发</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>consul</category>
            
          
        
        
      </item>
      
      <item>
        <title>分布式事务框架 seata</title>
        <link>http://ingress.test1.com/en/stack/knowledge/seata/</link>
        <pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 19 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/seata/</guid>
        <description>理论基础 CAP定理 1998年，加州大学，Eric Brewer提出，分布式系统有三个指标： Consistency(一致性) Availabili</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>seata</category>
            
          
        
        
      </item>
      
      <item>
        <title>亿级仓库礼物的建设与演进</title>
        <link>http://ingress.test1.com/en/posts/gift/</link>
        <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 18 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/posts/gift/</guid>
        <description>仓库礼物概览 1.普通送礼 充值星币 2.仓库送礼 活动赢星币 需求： 存储要求： 数量 礼物种类 过期属性 绑定属性 送礼功能 入/出仓库功能 目标： 实现基本功能条</description>
        
        <dc:creator>wangjinbao</dc:creator>
        <media:content url="http://ingress.test1.comimages/docImages/liwuzb.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>db</category>
            
          
        
        
          
            
              <category>db</category>
            
          
        
        
      </item>
      
      <item>
        <title>亿级仓库礼物的建设与演进</title>
        <link>http://ingress.test1.com/en/stack/bigdata/gift/</link>
        <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 18 May 2023 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/bigdata/gift/</guid>
        <description>仓库礼物概览 1.普通送礼 充值星币 2.仓库送礼 活动赢星币 需求： 存储要求： 数量 礼物种类 过期属性 绑定属性 送礼功能 入/出仓库功能 目标： 实现基本功能条</description>
        
        <dc:creator>wangjinbao</dc:creator>
        <media:content url="http://ingress.test1.comimages/docImages/liwuzb.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>db</category>
            
          
        
        
          
            
              <category>db</category>
            
          
        
        
      </item>
      
      <item>
        <title>gorilla/websocket</title>
        <link>http://ingress.test1.com/en/stack/golang/gin_gorilla/</link>
        <pubDate>Mon, 05 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 05 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/gin_gorilla/</guid>
        <description>基础知识 webSocket是什么 websocket是一种在单个tcp上进行 全双工通信 的协议，长连接，双向传输 第三方包：go get -u -v github.com/gorilla/websocket webso</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>kratos框架项目实践</title>
        <link>http://ingress.test1.com/en/stack/golang/kratos_project/</link>
        <pubDate>Mon, 05 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 05 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/kratos_project/</guid>
        <description>1.在项目根目录下新建models目录： 2.下载gorm包 1 2 3 4 5 6 7 8 9 10 11 12 13 $ go get -u gorm.io/gorm go: downloading gorm.io/gorm v1.25.5 go: downloading github.com/jinzhu/now v1.1.5 go: added github.com/jinzhu/inflection v1.0.0 go: added github.com/jinzhu/now v1.1.5 go: added gorm.io/gorm v1.25.5 $ go get</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>对称加密算法AES/DES/3DES和非对称加密算法RSA</title>
        <link>http://ingress.test1.com/en/stack/golang/go_crypt/</link>
        <pubDate>Sun, 04 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 04 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_crypt/</guid>
        <description>对称加密算法 特点 加密和解密使用的是同一个密钥，数据私密性双向保证，也就是加密和解密都不能泄露密码 优缺点 优点：加密效率高，适合大些的数据加密 缺</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>微服务保证事务的一致性</title>
        <link>http://ingress.test1.com/en/stack/golang/paxos/</link>
        <pubDate>Sun, 04 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 04 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/paxos/</guid>
        <description>事务的介绍 1.事务 1.1事务的产生 数据库 中的数据是 共享资源 ，因此数据库系统需要支持多个用户或不同应用程序的访问，并且各个访问进程都是独立执行</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>consul安装</title>
        <link>http://ingress.test1.com/en/stack/golang/consul/</link>
        <pubDate>Sat, 03 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 03 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/consul/</guid>
        <description>consul 官方网站： https://consul.io/ 安装consul 方式一：macOS系统： 1 2 3 4 brew tap hashicorp/tap brew install hashicorp/tap/consul //检查版本号 consul version 方式二：linux系统： Debian&amp;ndash; 1 2 3 wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>consul</category>
            
          
        
        
      </item>
      
      <item>
        <title>debug相关</title>
        <link>http://ingress.test1.com/en/stack/golang/debug/</link>
        <pubDate>Sat, 03 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 03 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/debug/</guid>
        <description>常见问题解决 version of Delve is too old for Go 问题： goland开启debug一直connected的问题 undefined behavior - version of Delve is too old for Go 解决： golang的调试器是d</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>go</category>
            
          
        
        
      </item>
      
      <item>
        <title>gin框架验证器validator</title>
        <link>http://ingress.test1.com/en/stack/golang/gin_validator/</link>
        <pubDate>Sat, 03 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 03 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/gin_validator/</guid>
        <description>安装 地址：github.com/go-playground/validator/v10 命令： 1 go get github.com/go-playground/validator/v10 模式绑定 若要将请求主体绑定到结构体中，请</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>kratos微服务框架</title>
        <link>http://ingress.test1.com/en/stack/golang/kratos/</link>
        <pubDate>Sat, 03 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 03 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/kratos/</guid>
        <description>kratos 优势 比对项 内容 框架名 kratos 维护公司 Bilibli 项目地址 https://github.com/go-kratos/kratos star数 21.7k 开源时间 2019年 服务治理 服务注册/发现、负载均衡、熔断、限流、异常恢复、监控、链路</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>微服务</title>
        <link>http://ingress.test1.com/en/stack/golang/microservices/</link>
        <pubDate>Sat, 03 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 03 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/microservices/</guid>
        <description>PS: 微服务架构 是一种设计方法; 而 微服务 这是应该指使用这种方法而设计的一个应用。 微服务架构 定义：将复杂的系统使用 组件化 的方式进行拆分，并使用轻量</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>GO Modules依赖管理</title>
        <link>http://ingress.test1.com/en/stack/golang/mod/</link>
        <pubDate>Fri, 02 Dec 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 02 Dec 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/mod/</guid>
        <description>Go Modules 简介 Go Modules 是 Go 官方推出的一个 Go 包管理方案 特性 可以使包的管理更加简单 支持版本管理 允许同一个模块多个版本共存 可以校验依赖包的哈希值，确保包的一</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>k8s</title>
        <link>http://ingress.test1.com/en/stack/linux/k8s/</link>
        <pubDate>Fri, 04 Nov 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 04 Nov 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/k8s/</guid>
        <description>一、namespace namespace的作用就是用来隔离资源，将同一集群中的资源划分为相互隔离的组。同一名称空间内的资源名称要唯一，但不同</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Serverless</title>
        <link>http://ingress.test1.com/en/stack/linux/serverless/</link>
        <pubDate>Fri, 04 Nov 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 04 Nov 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/serverless/</guid>
        <description>无服务器 不够灵活,难以预料的波动 无需CDN 历史： serverless=FaaS(Function as a Service)+BaaS(Backend as a Service) 浪费 好处： 1、使用的资源付费 2、服务高可用，弹性伸缩 3、无运维费用 缺点： 冷启动</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>goroutine概念</title>
        <link>http://ingress.test1.com/en/stack/golang/process/</link>
        <pubDate>Thu, 03 Nov 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 03 Nov 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/process/</guid>
        <description>进程 进程(Process)就是程序在操作系统中的 一次执行过程， 是系统进行资源分配和调度的基本单位，进程是一个动态概念，是程序在执行过程中分配</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Socket编程</title>
        <link>http://ingress.test1.com/en/stack/linux/socket/</link>
        <pubDate>Thu, 03 Nov 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 03 Nov 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/socket/</guid>
        <description>socket概念 在计算机网络中，Socket是一种抽象概念，它可以看作是一种端点，用于标识网络中的一个通信连接。一个Socket由 IP地址 和</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>协程池的设计和原理</title>
        <link>http://ingress.test1.com/en/stack/golang/gorountine/</link>
        <pubDate>Thu, 03 Nov 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 03 Nov 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/gorountine/</guid>
        <description>协程池 协程池是一种用于管理和复用协程的机制，它可以在并发编程中提供更好的性能和资源利用率。 在Go语言中，协程池可以通过使用 goroutine 和 channel 来实现。 原理</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>epoll模型的原理和工作过程</title>
        <link>http://ingress.test1.com/en/stack/linux/epoll/</link>
        <pubDate>Wed, 02 Nov 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 02 Nov 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/epoll/</guid>
        <description>常见的网络I/O模型有哪些 1.阻塞式I/O（Blocking I/O） 应用程序通过调用系统提供的I/O函数进行数据读写时，会阻塞等待直到数据传</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>goroutine并发实现</title>
        <link>http://ingress.test1.com/en/stack/golang/gorountines/</link>
        <pubDate>Wed, 02 Nov 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 02 Nov 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/gorountines/</guid>
        <description>常见并发模型 进程&amp;amp;线程(apache) C10K:C10K problem是指如何让服务器能够支持10k并发，当然你可以买昂贵的服务器，但是还有更便宜的</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>响应式布局</title>
        <link>http://ingress.test1.com/en/stack/javascript/layout/</link>
        <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 03 Jul 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/layout/</guid>
        <description>缺点 当一个网内容特别多(如：淘宝)的情况下，要一套代码响应多端这个工作比较繁琐，最关键的问题是移动端网站速度太慢了 SEO的问题 PS:问题：什</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>yarn包管理工具</title>
        <link>http://ingress.test1.com/en/stack/javascript/yarn/</link>
        <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 02 Jul 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/yarn/</guid>
        <description>支持Node版本 支持的node 版本： ^4.8.0 || ^5.7.0 || ^6.2.2 || &amp;gt;=8.0.0 yarn的优点 速度快： yarn使用并行安装和缓存机制，可以大大提高安装依赖包的速度。 稳定性</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>通用后台管理系统</title>
        <link>http://ingress.test1.com/en/stack/javascript/system/</link>
        <pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jul 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/javascript/system/</guid>
        <description>初步初始化项目 生成依赖文件package.json npm init -y 1 npm init -y 脚手架的安装 cnpm i -D @vue/cli 1 2 cnpm i -D @vue/cli 指定安装（cnpm i -D @vue/cli@4.</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>本地部署k8s集群及包管理工具使用</title>
        <link>http://ingress.test1.com/en/stack/k8s/k8s1/</link>
        <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 22 Jun 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/k8s1/</guid>
        <description>1 minikube搭建kubernetes集群环境 1.1 安装minikube minikube的安装： 1 2 3 4 5 6 7 8 9 # macOS brew install minikube # Windows choco install minikube # Linux curl</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>docker</category>
            
          
        
        
          
            
              <category>minikube</category>
            
          
            
              <category>helm</category>
            
          
        
        
      </item>
      
      <item>
        <title>EFK日志监控平台部署架构</title>
        <link>http://ingress.test1.com/en/stack/k8s/efk/</link>
        <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Tue, 21 Jun 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/efk/</guid>
        <description>组件介绍 ElasticSearch：日志存储 + 索引 + 搜索 Fluentd：日志采集、装饰、转换和传输 Kibana：日志查询展示 生产环境 + Kafka mi</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>docker</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
            
              <category>fluentd</category>
            
          
            
              <category>es</category>
            
          
            
              <category>kibana</category>
            
          
        
        
      </item>
      
      <item>
        <title>go开发者成长路线图</title>
        <link>http://ingress.test1.com/en/posts/grow_up/</link>
        <pubDate>Wed, 08 Jun 2022 12:00:06 +0900</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 08 Jun 2022 12:00:06 +0900</atom:modified>
        <guid>http://ingress.test1.com/en/posts/grow_up/</guid>
        <description></description>
        
        <dc:creator>wangjinbao</dc:creator>
        <media:content url="http://ingress.test1.comimages/feature3/img_2.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>4个倾听技术，让你和谁都聊得来</title>
        <link>http://ingress.test1.com/en/stack/career/qtjq/</link>
        <pubDate>Mon, 06 Jun 2022 00:00:05 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 06 Jun 2022 00:00:05 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/career/qtjq/</guid>
        <description>1、利用肢体语言表达关心 善用肢体语言 让对方感受到你的专注，有时候多说无意，只要给予对方一个微笑，或适时的点头，就能表达出内心的支持， 对此不妨</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>career</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>六个小策略教你成功推销建议</title>
        <link>http://ingress.test1.com/en/stack/career/txjy/</link>
        <pubDate>Mon, 06 Jun 2022 00:00:03 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 06 Jun 2022 00:00:03 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/career/txjy/</guid>
        <description>背景 小A：&amp;ldquo;我有一个提议想听听您的意见，我们的对手挖走了本公司的过半销售员，我认为我们需要改变公司吸引及激励人才的机制&amp;rdqu</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>career</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>如何有效提建议</title>
        <link>http://ingress.test1.com/en/stack/career/tjy/</link>
        <pubDate>Mon, 06 Jun 2022 00:00:02 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 06 Jun 2022 00:00:02 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/career/tjy/</guid>
        <description>沟通技巧 如何有效提建议 场景 小A是某商场市场部的职员，一直希望能够在职场上大显身手，一天你拿着建议书来到了经理办公室， 小A:&amp;ldquo;经理</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>career</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>忠言如何不逆耳</title>
        <link>http://ingress.test1.com/en/stack/career/zybne/</link>
        <pubDate>Mon, 06 Jun 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 06 Jun 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/career/zybne/</guid>
        <description>沟通技巧 忠言如何不逆耳 场景 经理 ：&amp;ldquo;你们赶紧开发A产品的吐槽功能，这样可以吸引更多的年轻客户&amp;rdquo; 小A：&amp;ldquo;我认</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>career</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>minikube安装(单机集群)</title>
        <link>http://ingress.test1.com/en/stack/k8s/minukube/</link>
        <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 21 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/minukube/</guid>
        <description>资源调整 原docker desktop中的配置： 关闭k8x：勾掉 Enable Kubernetes 也可调配置：降低 2h4G 安装minikube 安装kubectl 地址： https://kubernetes.io/docs/tasks/tools/ 本是mac</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>docker</category>
            
          
        
        
          
            
              <category>k8s</category>
            
          
        
        
      </item>
      
      <item>
        <title>启动Kubernetes下载镜像失败一直starting</title>
        <link>http://ingress.test1.com/en/stack/k8s/kubernetes/</link>
        <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 21 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/kubernetes/</guid>
        <description>starting失败原因 Kubernetes is starting 解决方案 拉取仓库k8s-docker-desktop-for-mac 我们先将该仓库拉取到本地： 1 git clone git@github.com:maguowei/k8s-docker-desktop-for-mac.git 查看版本</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>k8s</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>文本匹配模型</title>
        <link>http://ingress.test1.com/en/stack/python/answer/</link>
        <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 20 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/python/answer/</guid>
        <description>1、文本匹配模型分类 文本匹配模型在问答系统、信息检索、文本分类、自然语言处理等任务中都有广泛的应用。根据具体的任务和需求，可以选择合适的模型</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>python</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>python常用资料</title>
        <link>http://ingress.test1.com/en/stack/python/links/</link>
        <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 19 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/python/links/</guid>
        <description>1、相关连接 Python官方网站： https://www.python.org/ 这是Python语言的官方网站，你可以在这里找到Python的最新版本、文档、教程等。 Python入门教</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>python</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>全链路压测实践</title>
        <link>http://ingress.test1.com/en/stack/knowledge/e2e/</link>
        <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 19 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/e2e/</guid>
        <description>全链路压测 概念 全链路压测（End-to-End（E2E） Performance Testing） 是指对软件系统或服务进行综合性能测试的一种方法。它模拟了真实的用户</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>分布式事务的常用解决方案</title>
        <link>http://ingress.test1.com/en/stack/knowledge/transaction/</link>
        <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Thu, 19 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/transaction/</guid>
        <description>引言 在分布式系统中，事务管理是一项非常重要的任务。分布式事务涉及到多个事务参与者之间的协调和一致性保证，同时还要解决网络延迟、故障恢复等问题</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>mysql</category>
            
          
            
              <category>go</category>
            
          
        
        
      </item>
      
      <item>
        <title>保证缓存和数据库的数据一致性</title>
        <link>http://ingress.test1.com/en/stack/knowledge/data_same/</link>
        <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 18 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/data_same/</guid>
        <description>错误的解决方案 1 先更新数据库，再删除缓存 若数据库更新成功，删除缓存操作失败，则此后读到的都是缓存中过期的数据，造成不一致问题。 2 先更新数据库</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>mysql</category>
            
          
            
              <category>redis</category>
            
          
        
        
      </item>
      
      <item>
        <title>监控体系演进及可视化</title>
        <link>http://ingress.test1.com/en/stack/knowledge/monitor/</link>
        <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 18 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/monitor/</guid>
        <description>监控流程 数据上报 数据处理 接入使用 公有云建设（独立部署，功能闭环） 功能优化： HTTP接口，支持客户端外网上报 DC Agent，兼容基础指标上报 告警</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>直播分布式系统的一致性</title>
        <link>http://ingress.test1.com/en/stack/knowledge/trace/</link>
        <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 18 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/trace/</guid>
        <description>一、分布式理论基础 CAP Consitency(一致性) Availability(可用性) Partition tolerance(分区容错性) CAP无法同时满足 BA</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>golang中使用kafka的综合指南</title>
        <link>http://ingress.test1.com/en/stack/knowledge/kafkatips/</link>
        <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Tue, 17 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/kafkatips/</guid>
        <description>背景 kafka 是一个比较流行的 分布式 、 可拓展 、 高性能 、 可靠性 的流处理平台。 在处理kafka的数据时，这里有 确保处理效率和可靠性的 多种最佳实践。 下面介</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>kafka</category>
            
          
        
        
      </item>
      
      <item>
        <title>Kafka的重复消费和消息丢失问题</title>
        <link>http://ingress.test1.com/en/stack/knowledge/kafkaquestion/</link>
        <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Tue, 17 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/kafkaquestion/</guid>
        <description>介绍 在Kafka中，生产者（Producer） 和 消费者（Consumer） 是通过 发布订阅模式 进行协作的，生产者将消息发送到Kafka集群，而</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>kafka</category>
            
          
        
        
      </item>
      
      <item>
        <title>云原生观测性</title>
        <link>http://ingress.test1.com/en/stack/knowledge/observation/</link>
        <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Tue, 17 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/observation/</guid>
        <description>应用的稳定性，以及出现问题的时候，怎样的快速定位到真正的原因，对于很多企业来说是都是一直在不断的设计和完善的能力。主要体现在怎样监控系统，怎</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>微服务架构之幂等性问题</title>
        <link>http://ingress.test1.com/en/stack/knowledge/manyquest/</link>
        <pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Tue, 17 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/manyquest/</guid>
        <description>前言 小伙伴们有没有遇到过生产环境经常出现过重复的数据？在排查问题的时候，数据又是正常的。这个是何解呢？怎么会出现这种情况，而且还很难排查问题</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>kafka</category>
            
          
        
        
      </item>
      
      <item>
        <title>Filebeat日志采集组件</title>
        <link>http://ingress.test1.com/en/stack/knowledge/filebeat/</link>
        <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 16 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/filebeat/</guid>
        <description>概述 Filebeat是一个轻量级的日志数据收集工具，属于Elastic公司的Elastic Stack（ELK Stack）生态系统的一部分。 目</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>zookeeper、kafka、kafka-manager安装</title>
        <link>http://ingress.test1.com/en/stack/knowledge/kafka/</link>
        <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 16 May 2022 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/knowledge/kafka/</guid>
        <description>新建Dockerfile 新建文件夹zookeeper、kafka、kafka-manager，并添加相应的Dockerfile zookeep</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>knowledge</category>
            
          
        
        
          
            
              <category>kafka</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang垃圾回收原理分析</title>
        <link>http://ingress.test1.com/en/stack/golang/go_memery_analysis/</link>
        <pubDate>Sun, 06 Feb 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 06 Feb 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_memery_analysis/</guid>
        <description>垃圾回收算法 垃圾回收（Garbage Collection，简称 GC）是一种内存管理策略，由垃圾收集器以类似 守护协程 的方式在后台运作，按照既定</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Golang的sync包与锁</title>
        <link>http://ingress.test1.com/en/stack/golang/go_package_sync/</link>
        <pubDate>Sun, 06 Feb 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 06 Feb 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_package_sync/</guid>
        <description>背景 为什么需要锁？ 锁是 sync 包中的核心，它主要有两个方法，分别是 加锁（Lock）和 解锁（Unlock）。 在并发的情况下，多个线程或协程同时其修改</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Golang的内存管理</title>
        <link>http://ingress.test1.com/en/stack/golang/go_memery_cms/</link>
        <pubDate>Sat, 05 Feb 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 05 Feb 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_memery_cms/</guid>
        <description>思想 1.以空间换时间，一次缓存，多次复用 go中的堆 mheap 正是&amp;quot;缓存&amp;quot;的思想。 堆mheap的特点： 对于操作系统，是用户进程中缓</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Golang的常用命令</title>
        <link>http://ingress.test1.com/en/stack/golang/go_commond/</link>
        <pubDate>Sat, 05 Feb 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 05 Feb 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_commond/</guid>
        <description>go list (列出包和模块信息) go list在项目的根目录，go.mod目录，输出module名称 usage: go list [-f format] [-json] [-m] [list flags] [build flags] [packages] 用法: go list [-f format] [-json] [-m] [list flags] [build flags] [</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>CentOS24年停更后平替系统</title>
        <link>http://ingress.test1.com/en/stack/linux/centos_stop/</link>
        <pubDate>Wed, 05 Jan 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 05 Jan 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/centos_stop/</guid>
        <description>CentOS Linux 将于 Jun 30th, 2024 EOF(结束生命周期). 届时, 我们的 OS 还有哪些选择? 不要选择 CentOS Stream ! 不要选择 CentOS Stream ! 不要选择 CentOS Stream ! Linux生态 红帽企业级 Linux 生态系</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Istio</title>
        <link>http://ingress.test1.com/en/stack/linux/istio/</link>
        <pubDate>Sun, 02 Jan 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 02 Jan 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/istio/</guid>
        <description>istio概念 讲多了记不住，那就：服务网格 + 微服务治理 。</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
        
        
          
            
              <category>linux</category>
            
          
        
        
      </item>
      
      <item>
        <title>zsh下安装主题Powerlevel9k</title>
        <link>http://ingress.test1.com/en/stack/linux/zsh/</link>
        <pubDate>Sun, 02 Jan 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 02 Jan 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/zsh/</guid>
        <description>安装 Powerlevel9k 步骤一：安装 Powerline 字体库 1 2 3 4 $git clone https://github.com/powerline/fonts.git $./install.sh Copying fonts... Powerline fonts installed to /Users/wangdante/Library/Fonts （字段安装的目录） brew tap 更新第三方库，才能用 homebrew 安裝字型。执行过可以跳过 brew tap caskroom/fonts (旧版本，</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>linux的架构</title>
        <link>http://ingress.test1.com/en/stack/linux/linux_model/</link>
        <pubDate>Sat, 01 Jan 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 01 Jan 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/linux_model/</guid>
        <description>linux的架构 组成： 内核 系统库 shell 应用程序 内核 组件包括： 设备驱动程序 进程管理 内存管理 文件系统 网络协议系统 系统库 接口和函数包括： C标准库（li</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Nginx负载均衡中4层代理和7层代理的区别</title>
        <link>http://ingress.test1.com/en/stack/linux/proxy47/</link>
        <pubDate>Sat, 01 Jan 2022 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 01 Jan 2022 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/proxy47/</guid>
        <description>一、4层代理和7层代理什么意思？ 这里的层是OSI 7层网络模型，OSI 模型是从上往下的，越底层越接近硬件，越往上越接近软件，这七层模型分别是：</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>goframe框架集成任务队列machinery和定时任务</title>
        <link>http://ingress.test1.com/en/stack/golang/goframe_machinery/</link>
        <pubDate>Wed, 01 Dec 2021 12:00:06 +0900</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 01 Dec 2021 12:00:06 +0900</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/goframe_machinery/</guid>
        <description>Machinery Golang的分布式任务队列还不算多，目前比较成熟的应该就只有 Machinery 了。 如果熟悉Python中的异步任务框架的话，想必一定听过Celery。 异</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>ssh无密码登录容器</title>
        <link>http://ingress.test1.com/en/stack/k8s/sshlogin/</link>
        <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 23 May 2021 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/sshlogin/</guid>
        <description>目录 ├── Dockerfile ├── authorized_keys └── run.sh authorized_keys文件生成 authorized_keys文件生成： 1 2 3 4 ssh-keygen -t rsa cat ~/.ssh/id_rsa.pub cat ~/.ssh/id_rsa.pub &amp;gt; ~/.ssh/authorized_keys cp /root/.ssh/authorized_keys . run.sh</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>docker</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>十个实验熟练掌握Docker</title>
        <link>http://ingress.test1.com/en/stack/k8s/docker/</link>
        <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 21 May 2021 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/k8s/docker/</guid>
        <description>目标 用Docker搭建一套三层架构的Web系统（nodejs+PHP+MySQL） 掌握日常使用Docker进行程序开发、配置和发布的方法与原</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>docker</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>goframe框架-2</title>
        <link>http://ingress.test1.com/en/stack/golang/goframe2/</link>
        <pubDate>Wed, 03 Feb 2021 01:01:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Wed, 03 Feb 2021 01:01:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/goframe2/</guid>
        <description>命令管理 GetArg*参数获取 GetArg 方法用以获取默认解析的命令行参数，参数通过输入索引位置获取，索引位置从 0 开始，但往往我们需要获取的参数是从 1</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>goframe框架-1</title>
        <link>http://ingress.test1.com/en/stack/golang/goframe1/</link>
        <pubDate>Tue, 02 Feb 2021 01:01:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Tue, 02 Feb 2021 01:01:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/goframe1/</guid>
        <description>手动编译安装 这是万能的安装方式： 1 git clone https://github.com/gogf/gf &amp;amp;&amp;amp; cd gf/cmd/gf &amp;amp;&amp;amp; go install 验证安装成功 1 2 3 4 5 $ gf -v GoFrame CLI Tool v2.2.1, https://goframe.org GoFrame Version: cannot find goframe requirement in go.mod CLI Installed At: /usr/local/go/bin/gf Current is a custom installed version, no installation information. 创建项目</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>goframe目录</title>
        <link>http://ingress.test1.com/en/stack/golang/gofamedir/</link>
        <pubDate>Mon, 01 Feb 2021 01:01:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 01 Feb 2021 01:01:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/gofamedir/</guid>
        <description>一、工程目录结构 GoFrame业务项目基本目录结构如下（以Single Repo为例）： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 / ├── api ├── hack</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>学习go(第二部分)</title>
        <link>http://ingress.test1.com/en/stack/golang/go_part2/</link>
        <pubDate>Mon, 04 Jan 2021 01:01:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Mon, 04 Jan 2021 01:01:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_part2/</guid>
        <description>一、基本结构与基本数据类型 1、文件名、关键字与标识符 1.1 文件名 文件名 均由小写字母组成，如 scanner.go。 如果文件名由多个部分组成，则使用</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>学习go(第一部分)</title>
        <link>http://ingress.test1.com/en/stack/golang/go_part1/</link>
        <pubDate>Sun, 03 Jan 2021 01:01:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sun, 03 Jan 2021 01:01:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_part1/</guid>
        <description>一、起源与发展 起源 Go 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>linux安装golang</title>
        <link>http://ingress.test1.com/en/stack/golang/install_linux/</link>
        <pubDate>Sat, 02 Jan 2021 01:01:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 02 Jan 2021 01:01:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/install_linux/</guid>
        <description>一、下载 去官网下载 ，国内地址：https://golang.google.cn/dl/ 1 $ wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz 二、解压(需要root权限) 1 $ sudo tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz 三</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>golang注意事项</title>
        <link>http://ingress.test1.com/en/stack/golang/tips/</link>
        <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Sat, 02 Jan 2021 00:00:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/tips/</guid>
        <description>1、左大括号 { 不能单独放一行 在其他大多数语言中，{ 的位置你自行决定。Go比较特别，遵守分号注入规则（automatic semicolon injection）</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>golang安装、配置及版本升级</title>
        <link>http://ingress.test1.com/en/stack/golang/get_started/</link>
        <pubDate>Fri, 01 Jan 2021 01:01:00 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 01:01:00 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/get_started/</guid>
        <description>一、下载 去官网下载 ，国内地址：https://golang.google.cn/dl/ 选择对应的版本即可，我本地使用的是https://go</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Golang的观察者模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_observer/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:10 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:10 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_observer/</guid>
        <description>定义了对象之间的一对多依赖关系，使得当一个对象改变状态时，其所有依赖对象都会收到通知并自动更新 *个人理解说法： 步骤1 定义一个观察者的接口，有</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的装饰器模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_decorator/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:09 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:09 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_decorator/</guid>
        <description>装饰器模式可通过在接口中封装其它接口并添加行为来实现 如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import &amp;#34;fmt&amp;#34; type Component interface { Operation() string } type</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的工厂模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_factory/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:08 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:08 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_factory/</guid>
        <description>通过工厂方法创建对象，而无需指定创建对象的具体类 如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的单例模式</title>
        <link>http://ingress.test1.com/en/stack/golang/go_singleton/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:07 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:07 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_singleton/</guid>
        <description>对于设计模式，更多的则是仁者见仁智者见智，要在实际工作中不断的积累，再进行深度的思考，才能逐渐形成的一种思维。 单例模式 也叫单子模式，是常用的</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>Golang的常用内置包简介</title>
        <link>http://ingress.test1.com/en/stack/golang/go_pkg_normal/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:05 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:05 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_pkg_normal/</guid>
        <description>标准的Go语言代码库中包含了大量的包，并且在安装 Go 的时候多数会自动安装到系统中。我们可以在 $GOROOT/src/pkg 目录中查看这些包。下面简单介绍一些我们开发中常用</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>Golang包的GOPATH详解</title>
        <link>http://ingress.test1.com/en/stack/golang/go_gopath/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:03 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:03 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/golang/go_gopath/</guid>
        <description>GOPATH GOPATH 是 Go语言中使用的一个 环境变量 ，它使用绝对路径提供项目的工作目录 工作目录 是一个工程开发的相对参考目录，好比当你要在公司编写一套服务器代码</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
          
        
        
        
      </item>
      
      <item>
        <title>finalShell终端</title>
        <link>http://ingress.test1.com/en/stack/linux/finalshell/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:01 +0000</pubDate>
        <author>wang_jin_bao@163.com (wangjinbao)</author>
        <atom:modified>Fri, 01 Jan 2021 00:00:01 +0000</atom:modified>
        <guid>http://ingress.test1.com/en/stack/linux/finalshell/</guid>
        <description>FinalShell工具 功能 云端同步,免费海外服务器远程桌面加速,ssh加速,本地化命令输入框,支持自动补全,命令历史,自定义命令参数 下载 W</description>
        
        <dc:creator>wangjinbao</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>
